---
import { Icon } from "@astrojs/starlight/components";
const { class: className = '', style, href } = Astro.props;
// Wrap in <span> because Houdini is disabled for a[href] for security

const { variant = 'primary', icon = null } = Astro.props;
---

<span class:list={[`link pixel variant-${variant}`, className]} {style}>
	<a {href}>
		<span>
      <slot />
      {icon && <Icon name={icon} size="1.5rem" class="icon"/>}
    </span>
	</a>
</span>

<style>
	.pixel {
		--link-color-stop-a: var(--sl-color-blue);
		--link-color-stop-b: var(--sl-color-purple);

		--border-radius: 9999;
		--pixel-size: 4;
		--background: var(--gradient-pop-1);
		position: relative;
		border-radius: calc(var(--border-radius) * 1px);
		background: var(--background);
	}
	.pixel.variant-outline {
		background: rgba(0, 0, 0, 0);
		border-radius: 0;
	}
	@supports (background: paint(pixel)) {
		:global(.js) .pixel {
			background: none !important;
		}
		:global(.js) .pixel::before {
			content: '';
			position: absolute;
			top: 0;
			right: 0;
			bottom: 0;
			left: 0;
			display: block;
			z-index: -1;
			overflow: hidden;
			border-radius: 0;
			background: var(--background);
			-webkit-mask-image: paint(pixel);
			mask-image: paint(pixel);
		}
		:global(.js) .pixel::after {
			content: none;
		}
	}
	.link {
		--border-radius: 9999;
		--duration: 200ms;
		--delay: 30ms;
		--background: linear-gradient(180deg, var(--link-color-stop-a), var(--link-color-stop-b));
		display: flex;
		color: white;
		font-family: var(--font-display);
		font-size: var(--sl-text-lg);
		width: max-content;
		transition-property: transform, --link-color-stop-a, --link-color-stop-b;
		transition-duration: var(--duration);
		transition-delay: var(--delay);
		transition-timing-function: cubic-bezier(0.22, 1, 0.36, 1);
	}
	.link:hover,
	.link:focus-within {
		transform: translateY(calc(var(--pixel-size) * -0.5px));
	}
	.link:active {
		transform: translateY(0);
	}
  .link.variant-outline {
    color: var(--sl-color-white)
  }

  .icon {
    display: inline-block !important;
    transform: translateY(0.375rem);
    align-self: center;
  }

	a {
		display: flex;
		align-items: center;
		justify-content: center;
		padding: 0.67rem 1.25rem;
		width: 100%;
		height: 100%;
		text-decoration: none;
		color: inherit !important;
		/* Indicates the button boundaries for forced colors users in older browsers */
		outline: 1px solid transparent;
	}

	@media (forced-colors: active) {
		a {
			border: 1px solid LinkText;
		}
	}

	a > :global(* + *) {
		margin-inline-start: 0.25rem;
	}

	.variant-primary {
		--variant: primary;
		--background: linear-gradient(90deg, var(--link-color-stop-a), var(--link-color-stop-b));
	}
	.variant-primary:hover,
	.variant-primary:focus-within {
		--link-color-stop-a: #6d39ff;
		--link-color-stop-b: #af43ff;
	}
	.variant-primary:active {
		--link-color-stop-a: #5f31e1;
		--link-color-stop-b: #a740f3;
	}

  .variant-blank {
		--variant: primary;
		--background: var(--sl-color-white);
    color: var(--sl-color-black);
	}

	.variant-outline {
		--variant: outline;
	}
	.variant-outline > a::before {
		position: absolute;
		top: 0;
		right: calc(var(--pixel-size) * 1px);
		bottom: calc(var(--pixel-size) * 1px);
		left: calc(var(--pixel-size) * 1px);
		content: '';
		display: block;
		transform-origin: bottom center;
		background: linear-gradient(to top, var(--background), rgba(255, 255, 255, 0));
		opacity: 0.3;
		transform: scaleY(0);
		transition: transform 200ms cubic-bezier(0.22, 1, 0.36, 1);
	}
	.variant-outline:hover > a::before,
	.variant-outline:focus-within > a::before {
		transform: scaleY(1);
	}
	.variant-outline:active > a::before {
		transform: scaleY(1);
	}
</style>
